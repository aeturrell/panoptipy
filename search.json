[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "panoptipy",
    "section": "",
    "text": "⚠️ Under development; use not currently recommended\n\nA Python Package for Static Code Quality Assessment. Use it to analyse your repos and assess their quality.\n\n          \n  \n\n\nThe main way to use panoptipy is through its command-line interface. Here’s how to scan a Python git repository that is in the “project” directory:\n# Basic scan with default settings\n$ panoptipy scan /path/to/project\n\n# Scan with custom configuration file\n$ panoptipy scan /path/to/project --config path/to/config.toml\n\n# Scan with different output format\n$ panoptipy scan /path/to/project --format json\nThe default output format is console, but you can also specify “parquet”, for which you will also need to specify an output path with --output.\nThe scan command will:\n\nLoad all configured checks\nAnalyse your codebase\nGenerate a report with the results\n\nIf you wish to configure panoptipy to your needs, you can do so by either creating a specific configuration file with the --config option or by adding the following to your pyproject.toml file:\n[tool.panoptipy]\nchecks = { enabled = [\"large_files\"], disabled = [], critical = [\"ruff_linting\"] }\n\n[tool.panoptipy.thresholds]\nmax_file_size = 1000\nNote that if you specify no check IDs, no checks at all will be run.\nWhat does a “critical” check mean? The CLI will: - Exit with code 1 if any critical checks failed - Exit with code 0 if no critical checks failed\nThe scan will produce a report that shows:\n\nOverall codebase rating (Gold, Silver, Bronze, or Problematic)\nA summary of whether each individual check passed or not\nDetailed information about any failures\n\n\n\n\nTo use on multiple repositories, simply pass multiple paths. This will scan all repositories in the specified directory.\npanoptipy scan /path/to/repo1 /path/to/repo2\nYou can also use wildcards to scan multiple repositories at once. For example, to scan all repositories beginning with “py” in the current directory, you can use:\npanoptipy scan ./py*\n\n\n\nYou can use panoptipy to scan GitHub repositories. Note that, even for public repositories, you will need to authenticate with a GitHub token.\n\n\npanoptipy scan-user username --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-team organisation-name team-name --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-user username --format json --output report.json --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-user username --config path/to/config.toml --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-user username --max-repos 5 --token YOUR_GITHUB_TOKEN\n\n\n\n\npanoptipy scan .\n\n\n\nRepository: ..\n\n\n╭────────────────────────────── Panoptipy Report ──────────────────────────────╮\n│ Codebase Rating: SILVER                                                      │\n╰──────────────────────────────────────────────────────────────────────────────╯\n\nSummary:\nTotal checks: 8\nFail: 2\nPass: 6\nPass rate: 75.0%\n                                                                                \n                              Check Results for ..                              \n┏━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃  Status  ┃ Check ID                ┃ Message                                 ┃\n┡━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ ❌       │ docstrings              │ Found 31 public items without           │\n│          │                         │ docstrings                              │\n│ ❌       │ private_key             │ Found 1 files containing private keys   │\n│ ✅       │ ruff_linting            │ No linting issues found                 │\n│ ✅       │ ruff_format             │ All files are properly formatted        │\n│ ✅       │ large_files             │ No version-controlled files exceed size │\n│          │                         │ threshold (500KB)                       │\n│ ✅       │ notebook_output         │ All notebooks are properly stripped of  │\n│          │                         │ outputs and excess metadata             │\n│ ✅       │ pydoclint               │ All docstrings match type signatures in │\n│          │                         │ 15 files                                │\n│ ✅       │ pyproject_toml_validate │ pyproject.toml validated successfully   │\n│          │                         │ by validate-pyproject API.              │\n└──────────┴─────────────────────────┴─────────────────────────────────────────┘\n\nDetails:\n╭───────────────────────────────── docstrings ─────────────────────────────────╮\n│ missing_docstrings:                                                          │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:get_tr │\n│ acked_files                                                                  │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:safe_c │\n│ heck_run                                                                     │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:parse_ │\n│ tool_output                                                                  │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:succes │\n│ s_result                                                                     │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:fail_r │\n│ esult                                                                        │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:Notebo │\n│ okOutputCheck                                                                │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:catego │\n│ ry                                                                           │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:run    │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:catego │\n│ ry                                                                           │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:run    │\n│   ... and 21 more                                                            │\n╰──────────────────────────────────────────────────────────────────────────────╯\n╭──────────────────────────────── private_key ─────────────────────────────────╮\n│ files_with_private_keys:                                                     │\n│   • {'file': 'src/panoptipy/checks.py', 'pattern': 'BEGIN RSA PRIVATE KEY',  │\n│ 'message': 'Contains private key pattern: BEGIN RSA PRIVATE KEY'}            │\n│ count: 1                                                                     │\n╰──────────────────────────────────────────────────────────────────────────────╯\n\n\n\n\n\n\n\n\n\n\n\n\n\ncheck_id\ndescription\n\n\n\n\ndocstrings\nChecks that public functions and classes have docstrings (excluding tests)\n\n\nruff_linting\nChecks code for linting errors using ruff\n\n\nruff_format\nChecks that code follows proper formatting using ruff format\n\n\nprivate_key\nChecks for private keys in version-controlled files\n\n\nlarge_files\nChecks for large files that exceed size threshold\n\n\nnotebook_output\nChecks that Jupyter notebooks don't contain output cells or unnecessary metadata\n\n\npydoclint\nChecks that docstrings match type signatures using pydoclint\n\n\npyproject_toml_validate\nChecks pyproject.toml format and schema using validate-pyproject API\n\n\n\n\n\n\n        \n\n\n\n\n\nYou can use panoptipy as a stand-alone tool using Astral’s uv package:\nuvx panoptipy scan .\nAlternatively, you can install it as a Python package with pip install or uv add.\nTo install the development version from git, use:\n$ pip install git+https://github.com/aeturrell/panoptipy.git\n\n\n\nYou can find a full list of requirements in the pyproject.toml file.\n\n\n\nDistributed under the terms of the MIT license, panoptipy is free and open source software.\n\n\n\nIf you encounter any problems, please file an issue along with a detailed description."
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "panoptipy",
    "section": "",
    "text": "The main way to use panoptipy is through its command-line interface. Here’s how to scan a Python git repository that is in the “project” directory:\n# Basic scan with default settings\n$ panoptipy scan /path/to/project\n\n# Scan with custom configuration file\n$ panoptipy scan /path/to/project --config path/to/config.toml\n\n# Scan with different output format\n$ panoptipy scan /path/to/project --format json\nThe default output format is console, but you can also specify “parquet”, for which you will also need to specify an output path with --output.\nThe scan command will:\n\nLoad all configured checks\nAnalyse your codebase\nGenerate a report with the results\n\nIf you wish to configure panoptipy to your needs, you can do so by either creating a specific configuration file with the --config option or by adding the following to your pyproject.toml file:\n[tool.panoptipy]\nchecks = { enabled = [\"large_files\"], disabled = [], critical = [\"ruff_linting\"] }\n\n[tool.panoptipy.thresholds]\nmax_file_size = 1000\nNote that if you specify no check IDs, no checks at all will be run.\nWhat does a “critical” check mean? The CLI will: - Exit with code 1 if any critical checks failed - Exit with code 0 if no critical checks failed\nThe scan will produce a report that shows:\n\nOverall codebase rating (Gold, Silver, Bronze, or Problematic)\nA summary of whether each individual check passed or not\nDetailed information about any failures"
  },
  {
    "objectID": "index.html#multiple-repositories",
    "href": "index.html#multiple-repositories",
    "title": "panoptipy",
    "section": "",
    "text": "To use on multiple repositories, simply pass multiple paths. This will scan all repositories in the specified directory.\npanoptipy scan /path/to/repo1 /path/to/repo2\nYou can also use wildcards to scan multiple repositories at once. For example, to scan all repositories beginning with “py” in the current directory, you can use:\npanoptipy scan ./py*"
  },
  {
    "objectID": "index.html#github-integration-examples",
    "href": "index.html#github-integration-examples",
    "title": "panoptipy",
    "section": "",
    "text": "You can use panoptipy to scan GitHub repositories. Note that, even for public repositories, you will need to authenticate with a GitHub token.\n\n\npanoptipy scan-user username --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-team organisation-name team-name --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-user username --format json --output report.json --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-user username --config path/to/config.toml --token YOUR_GITHUB_TOKEN\n\n\n\npanoptipy scan-user username --max-repos 5 --token YOUR_GITHUB_TOKEN"
  },
  {
    "objectID": "index.html#example-use-on-this-repo",
    "href": "index.html#example-use-on-this-repo",
    "title": "panoptipy",
    "section": "",
    "text": "panoptipy scan .\n\n\n\nRepository: ..\n\n\n╭────────────────────────────── Panoptipy Report ──────────────────────────────╮\n│ Codebase Rating: SILVER                                                      │\n╰──────────────────────────────────────────────────────────────────────────────╯\n\nSummary:\nTotal checks: 8\nFail: 2\nPass: 6\nPass rate: 75.0%\n                                                                                \n                              Check Results for ..                              \n┏━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃  Status  ┃ Check ID                ┃ Message                                 ┃\n┡━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ ❌       │ docstrings              │ Found 31 public items without           │\n│          │                         │ docstrings                              │\n│ ❌       │ private_key             │ Found 1 files containing private keys   │\n│ ✅       │ ruff_linting            │ No linting issues found                 │\n│ ✅       │ ruff_format             │ All files are properly formatted        │\n│ ✅       │ large_files             │ No version-controlled files exceed size │\n│          │                         │ threshold (500KB)                       │\n│ ✅       │ notebook_output         │ All notebooks are properly stripped of  │\n│          │                         │ outputs and excess metadata             │\n│ ✅       │ pydoclint               │ All docstrings match type signatures in │\n│          │                         │ 15 files                                │\n│ ✅       │ pyproject_toml_validate │ pyproject.toml validated successfully   │\n│          │                         │ by validate-pyproject API.              │\n└──────────┴─────────────────────────┴─────────────────────────────────────────┘\n\nDetails:\n╭───────────────────────────────── docstrings ─────────────────────────────────╮\n│ missing_docstrings:                                                          │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:get_tr │\n│ acked_files                                                                  │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:safe_c │\n│ heck_run                                                                     │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:parse_ │\n│ tool_output                                                                  │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:succes │\n│ s_result                                                                     │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:fail_r │\n│ esult                                                                        │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:Notebo │\n│ okOutputCheck                                                                │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:catego │\n│ ry                                                                           │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:run    │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:catego │\n│ ry                                                                           │\n│   •                                                                          │\n│ /home/runner/work/panoptipy/panoptipy/docs/../src/panoptipy/checks.py:run    │\n│   ... and 21 more                                                            │\n╰──────────────────────────────────────────────────────────────────────────────╯\n╭──────────────────────────────── private_key ─────────────────────────────────╮\n│ files_with_private_keys:                                                     │\n│   • {'file': 'src/panoptipy/checks.py', 'pattern': 'BEGIN RSA PRIVATE KEY',  │\n│ 'message': 'Contains private key pattern: BEGIN RSA PRIVATE KEY'}            │\n│ count: 1                                                                     │\n╰──────────────────────────────────────────────────────────────────────────────╯"
  },
  {
    "objectID": "index.html#available-checks",
    "href": "index.html#available-checks",
    "title": "panoptipy",
    "section": "",
    "text": "check_id\ndescription\n\n\n\n\ndocstrings\nChecks that public functions and classes have docstrings (excluding tests)\n\n\nruff_linting\nChecks code for linting errors using ruff\n\n\nruff_format\nChecks that code follows proper formatting using ruff format\n\n\nprivate_key\nChecks for private keys in version-controlled files\n\n\nlarge_files\nChecks for large files that exceed size threshold\n\n\nnotebook_output\nChecks that Jupyter notebooks don't contain output cells or unnecessary metadata\n\n\npydoclint\nChecks that docstrings match type signatures using pydoclint\n\n\npyproject_toml_validate\nChecks pyproject.toml format and schema using validate-pyproject API"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "panoptipy",
    "section": "",
    "text": "You can use panoptipy as a stand-alone tool using Astral’s uv package:\nuvx panoptipy scan .\nAlternatively, you can install it as a Python package with pip install or uv add.\nTo install the development version from git, use:\n$ pip install git+https://github.com/aeturrell/panoptipy.git"
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "panoptipy",
    "section": "",
    "text": "You can find a full list of requirements in the pyproject.toml file."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "panoptipy",
    "section": "",
    "text": "Distributed under the terms of the MIT license, panoptipy is free and open source software."
  },
  {
    "objectID": "index.html#issues",
    "href": "index.html#issues",
    "title": "panoptipy",
    "section": "",
    "text": "If you encounter any problems, please file an issue along with a detailed description."
  },
  {
    "objectID": "reference/checks.html",
    "href": "reference/checks.html",
    "title": "checks",
    "section": "",
    "text": "checks\nBase classes for implementing checks in panoptipy.\n\n\n\n\n\nName\nDescription\n\n\n\n\nCheck\nBase class for all checks.\n\n\nCheckResult\nResult of a single code quality check.\n\n\nCheckStatus\nStatus of a check run.\n\n\nDocstringCheck\nCheck to ensure proper documentation through docstrings in Python codebase.\n\n\nLargeFilesCheck\nA check that identifies large files in version control that exceed a specified size threshold.\n\n\nPrivateKeyCheck\nA security check that scans files for private key patterns.\n\n\nPydoclintCheck\nA check implementation to validate docstring compatibility with type signatures using pydoclint.\n\n\nPyprojectTomlValidateCheck\nA check class that validates the pyproject.toml file format and schema.\n\n\nRuffFormatCheck\nA check class that verifies code formatting using ruff format.\n\n\nRuffLintingCheck\nA Check implementation that performs linting using the Ruff linter.\n\n\n\n\n\nchecks.Check(self, check_id, description)\nBase class for all checks.\n\n\n\n\n\nName\nDescription\n\n\n\n\ncategory\nCategory this check belongs to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nRun this check against a codebase.\n\n\n\n\n\nchecks.Check.run(codebase)\nRun this check against a codebase.\n\n\n\n\n\nchecks.CheckResult(\n    self,\n    check_id,\n    status,\n    message,\n    repo_path=None,\n    details=None,\n)\nResult of a single code quality check.\n\n\n\nchecks.CheckStatus()\nStatus of a check run.\n\n\n\nchecks.DocstringCheck(self)\nCheck to ensure proper documentation through docstrings in Python codebase.\nThis class implements a check that verifies the presence of docstrings for all public functions and classes in a Python codebase, excluding test files and test-related items. The check considers an item “public” if it doesn’t start with an underscore, and identifies test-related items through various common naming patterns.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “docstrings”\n\n\ndescription\nstr\nHuman-readable description of what this check does\n\n\n\n\n\n\n\nchecks.LargeFilesCheck(self, config=None)\nA check that identifies large files in version control that exceed a specified size threshold.\nThis check examines all tracked files in the repository and reports those that are larger than the configured maximum size. This helps identify potentially problematic large files that could bloat the repository or data that have been added to version control by mistake.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmax_size_kb\nint\nMaximum allowed file size in kilobytes. Defaults to 500KB if not specified.\n\n\ncheck_id\nstr\nUnique identifier for this check (“large_files”)\n\n\n\n\n\n\n\nchecks.PrivateKeyCheck(self, additional_patterns=None)\nA security check that scans files for private key patterns.\nThis class implements a security check to detect private keys in version-controlled files by looking for common private key header patterns. It helps prevent accidental exposure of sensitive credentials in source code repositories.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nBLACKLIST\nList[bytes]\nDefault list of byte patterns indicating private keys\n\n\nblacklist\nList[bytes]\nInstance copy of BLACKLIST that can be extended\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nadditional_patterns\nOptional[List[bytes]]\nAdditional patterns to check. These patterns will be added to the default BLACKLIST. Defaults to None.\nNone\n\n\n\n\n\n\n\nchecks.PydoclintCheck(self)\nA check implementation to validate docstring compatibility with type signatures using pydoclint.\nThis class extends the base Check class to verify that docstrings in Python files match their corresponding type signatures. It uses the pydoclint tool to perform the validation.\nThe check will: 1. Find all Python files in version control 2. Filter files to only those containing both docstrings and type annotations 3. Run pydoclint on the filtered files 4. Report any mismatches between docstrings and type signatures\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “pydoclint”\n\n\ndescription\nstr\nDescription of what this check does\n\n\n\n\n\n\n\nchecks.PyprojectTomlValidateCheck(self)\nA check class that validates the pyproject.toml file format and schema.\nThis check validates both the TOML syntax and the schema of pyproject.toml using the validate-pyproject API. It verifies that the file exists in the codebase root directory and contains valid configuration.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “pydoclint”\n\n\ndescription\nstr\nDescription of what this check does\n\n\n\n\n\n\n\nchecks.RuffFormatCheck(self)\nA check class that verifies code formatting using ruff format.\nThis class implements a check to ensure that code follows proper formatting according to ruff format standards. It runs the ‘ruff format –check’ command on the codebase and reports any formatting inconsistencies.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “ruff_format”\n\n\ndescription\nstr\nDescription of what this check does\n\n\n\n\n\n\n\nchecks.RuffLintingCheck(self)\nA Check implementation that performs linting using the Ruff linter.\nThis class runs the Ruff linter on a codebase to identify code style and quality issues.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nUnique identifier “ruff_linting” for this check\n\n\ndescription\nstr\nHuman readable description of what this check does",
    "crumbs": [
      "Reference",
      "checks"
    ]
  },
  {
    "objectID": "reference/checks.html#classes",
    "href": "reference/checks.html#classes",
    "title": "checks",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nCheck\nBase class for all checks.\n\n\nCheckResult\nResult of a single code quality check.\n\n\nCheckStatus\nStatus of a check run.\n\n\nDocstringCheck\nCheck to ensure proper documentation through docstrings in Python codebase.\n\n\nLargeFilesCheck\nA check that identifies large files in version control that exceed a specified size threshold.\n\n\nPrivateKeyCheck\nA security check that scans files for private key patterns.\n\n\nPydoclintCheck\nA check implementation to validate docstring compatibility with type signatures using pydoclint.\n\n\nPyprojectTomlValidateCheck\nA check class that validates the pyproject.toml file format and schema.\n\n\nRuffFormatCheck\nA check class that verifies code formatting using ruff format.\n\n\nRuffLintingCheck\nA Check implementation that performs linting using the Ruff linter.\n\n\n\n\n\nchecks.Check(self, check_id, description)\nBase class for all checks.\n\n\n\n\n\nName\nDescription\n\n\n\n\ncategory\nCategory this check belongs to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nRun this check against a codebase.\n\n\n\n\n\nchecks.Check.run(codebase)\nRun this check against a codebase.\n\n\n\n\n\nchecks.CheckResult(\n    self,\n    check_id,\n    status,\n    message,\n    repo_path=None,\n    details=None,\n)\nResult of a single code quality check.\n\n\n\nchecks.CheckStatus()\nStatus of a check run.\n\n\n\nchecks.DocstringCheck(self)\nCheck to ensure proper documentation through docstrings in Python codebase.\nThis class implements a check that verifies the presence of docstrings for all public functions and classes in a Python codebase, excluding test files and test-related items. The check considers an item “public” if it doesn’t start with an underscore, and identifies test-related items through various common naming patterns.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “docstrings”\n\n\ndescription\nstr\nHuman-readable description of what this check does\n\n\n\n\n\n\n\nchecks.LargeFilesCheck(self, config=None)\nA check that identifies large files in version control that exceed a specified size threshold.\nThis check examines all tracked files in the repository and reports those that are larger than the configured maximum size. This helps identify potentially problematic large files that could bloat the repository or data that have been added to version control by mistake.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmax_size_kb\nint\nMaximum allowed file size in kilobytes. Defaults to 500KB if not specified.\n\n\ncheck_id\nstr\nUnique identifier for this check (“large_files”)\n\n\n\n\n\n\n\nchecks.PrivateKeyCheck(self, additional_patterns=None)\nA security check that scans files for private key patterns.\nThis class implements a security check to detect private keys in version-controlled files by looking for common private key header patterns. It helps prevent accidental exposure of sensitive credentials in source code repositories.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nBLACKLIST\nList[bytes]\nDefault list of byte patterns indicating private keys\n\n\nblacklist\nList[bytes]\nInstance copy of BLACKLIST that can be extended\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nadditional_patterns\nOptional[List[bytes]]\nAdditional patterns to check. These patterns will be added to the default BLACKLIST. Defaults to None.\nNone\n\n\n\n\n\n\n\nchecks.PydoclintCheck(self)\nA check implementation to validate docstring compatibility with type signatures using pydoclint.\nThis class extends the base Check class to verify that docstrings in Python files match their corresponding type signatures. It uses the pydoclint tool to perform the validation.\nThe check will: 1. Find all Python files in version control 2. Filter files to only those containing both docstrings and type annotations 3. Run pydoclint on the filtered files 4. Report any mismatches between docstrings and type signatures\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “pydoclint”\n\n\ndescription\nstr\nDescription of what this check does\n\n\n\n\n\n\n\nchecks.PyprojectTomlValidateCheck(self)\nA check class that validates the pyproject.toml file format and schema.\nThis check validates both the TOML syntax and the schema of pyproject.toml using the validate-pyproject API. It verifies that the file exists in the codebase root directory and contains valid configuration.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “pydoclint”\n\n\ndescription\nstr\nDescription of what this check does\n\n\n\n\n\n\n\nchecks.RuffFormatCheck(self)\nA check class that verifies code formatting using ruff format.\nThis class implements a check to ensure that code follows proper formatting according to ruff format standards. It runs the ‘ruff format –check’ command on the codebase and reports any formatting inconsistencies.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nIdentifier for this check, set to “ruff_format”\n\n\ndescription\nstr\nDescription of what this check does\n\n\n\n\n\n\n\nchecks.RuffLintingCheck(self)\nA Check implementation that performs linting using the Ruff linter.\nThis class runs the Ruff linter on a codebase to identify code style and quality issues.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncheck_id\nstr\nUnique identifier “ruff_linting” for this check\n\n\ndescription\nstr\nHuman readable description of what this check does",
    "crumbs": [
      "Reference",
      "checks"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "What panoptipy’s functions do\n\n\n\nchecks\nBase classes for implementing checks in panoptipy.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#reference",
    "href": "reference/index.html#reference",
    "title": "Function reference",
    "section": "",
    "text": "What panoptipy’s functions do\n\n\n\nchecks\nBase classes for implementing checks in panoptipy.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "panoptipy",
    "section": "",
    "text": "# Contributing\nThank you for your interest in improving this project. This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.\nHere is a list of important resources for contributors:"
  },
  {
    "objectID": "contributing.html#how-to-report-a-bug",
    "href": "contributing.html#how-to-report-a-bug",
    "title": "panoptipy",
    "section": "How to report a bug",
    "text": "How to report a bug\nReport bugs on the Issue Tracker.\nWhen filing an issue, make sure to answer these questions:\n\nWhich operating system and Python version are you using?\nWhich version of this project are you using?\nWhat did you do?\nWhat did you expect to see?\nWhat did you see instead?\n\nThe best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue."
  },
  {
    "objectID": "contributing.html#how-to-request-a-feature",
    "href": "contributing.html#how-to-request-a-feature",
    "title": "panoptipy",
    "section": "How to request a feature",
    "text": "How to request a feature\nRequest features on the Issue Tracker."
  },
  {
    "objectID": "contributing.html#how-to-set-up-your-development-environment",
    "href": "contributing.html#how-to-set-up-your-development-environment",
    "title": "panoptipy",
    "section": "How to set up your development environment",
    "text": "How to set up your development environment\nYou need Python and the following tools:\n\nuv\nNox\nMake\nQuarto\n\nInstall the package with the existing development requirements:\n$ uv sync --frozen\nTo also update packages, do not use the --frozen flag.\nTo build the documentation locally, you will also need Make and Quarto (these are non-Python dependencies).\nYou can build the docs locally to look at them with make, which runs a command to build the README and then another to build the website which can then be found in docs/_site/. It’s make clean to remove the existing README.\nTo publish new docs to GitHub Pages (where the documentation is displayed as web pages), it’s make publish—but only devs with admin rights will be able to execute this."
  },
  {
    "objectID": "contributing.html#how-to-test-the-project",
    "href": "contributing.html#how-to-test-the-project",
    "title": "panoptipy",
    "section": "How to test the project",
    "text": "How to test the project\nRun the full test suite:\n$ uv run nox\nList the available Nox sessions:\n$ uv run nox --list-sessions\nYou can also run a specific Nox session. For example, invoke the unit test suite like this:\n$ uv run nox --session=tests\nUnit tests are located in the tests directory, and are written using the pytest testing framework.\nYou may need to use, for example, uv run nox to ensure that the tests are run in the right environment.\nFor the pre-commit checks, use\n$ uv run pre-commit run --all-files"
  },
  {
    "objectID": "contributing.html#how-to-submit-changes",
    "href": "contributing.html#how-to-submit-changes",
    "title": "panoptipy",
    "section": "How to submit changes",
    "text": "How to submit changes\nOpen a pull request to submit changes to this project.\nYour pull request needs to meet the following guidelines for acceptance:\n\nThe Nox test suite must pass without errors and warnings.\nInclude unit tests. This project aims to maintain 96% code coverage.\nIf your changes add functionality, update the documentation accordingly.\nRun make to generate the new documentation.\nRun the pre-commit suite before committing.\n\nFeel free to submit early, though—we can always iterate on this.\nTo run linting and code formatting checks before committing your change, you need to run the following command:\n$ uv run nox --session=pre-commit -- install\nIt is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach."
  },
  {
    "objectID": "contributing.html#how-to-create-a-package-release",
    "href": "contributing.html#how-to-create-a-package-release",
    "title": "panoptipy",
    "section": "How to create a package release",
    "text": "How to create a package release\n\nOpen a new branch with the version name\nChange the version in pyproject.toml (you can run uv run version_bumper.py, which has script-level dependencies)\nCommit the change with a new version label as the commit message (checking the tests pass)\nHead to GitHub and merge into main (again, if the CI works)\nConfirm the release draft on GitHub\nThe automatic release GitHub Action will push to PyPI.\n\nIf you ever need distributable files, you can use the uv build command locally."
  },
  {
    "objectID": "contributing.html#how-to-build-the-documentation-manually-and-locally",
    "href": "contributing.html#how-to-build-the-documentation-manually-and-locally",
    "title": "panoptipy",
    "section": "How to build the documentation manually and locally",
    "text": "How to build the documentation manually and locally\nYou shouldn’t need to publish the documentation because there’s a GitHub action that covers it automatically whenever there’s a new release. But to upload the documentation manually, it’s\n\nRun make to build the documentation\nRun make publish to publish the documentation"
  }
]